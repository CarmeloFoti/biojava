Package org.biojava.ontology.format.triples;

Helpers
  all = [ 0 .. 65535 ];
  letter_lc = ['a'..'z'];
  letter_uc = ['A'..'Z'];
  letter = letter_lc | letter_uc;
  digit = ['0'..'9'];
  underscore = '_';
  ht  = 0x09;
  lf  = 0x0a;
  ff  = 0x0c;
  cr  = 0x0d;
  sp  = ' ';
  quote = '"';
  hash = '#';

  line_terminator = lf | cr | cr lf;
  not_lf = [all - lf];
  not_line_terminator = [not_lf - cr];
  not_right_curly = [all - '}'];
  not_quote = [all - '"'];

Tokens
  namespace = 'namespace';
  import = 'import';
  as = 'as';

  blank = (sp | ht | ff | line_terminator)*;

  left_elipse = '(';
  right_elipse = ')';
  left_curly = '{';
  right_curly = '}';
  left_square = '[';
  right_square = ']';
  comma = ',';
  dot = '.';

  name = letter (letter | digit | underscore)*;
  variable = underscore (letter | digit | underscore)*;
  number = digit+;

  comment = '{' not_right_curly* '}';
  user_comment = hash not_line_terminator* line_terminator;

  quoted_string = '"' not_quote '"';

Ignored Tokens
  blank,
  user_comment;

Productions
  program =
    namespace_decl import_expr* expression_decl*;

  namespace_decl = namespace full_name comment?;

  import_expr = import full_name as name;

  expression_decl =
    expression_name? expression;

  expression_name =
    name as;

  expression =
    {complex} [predicate]:predicate comment?
              left_elipse [subject]:expression
              comma [object]:expression right_elipse |
    {list} list |
    {simple} value comment?;

  predicate =
    {name} full_name |
    {variable} variable;

  value =
    {name} full_name |
    {variable} variable |
    {integer_literal} integer_literal |
    {string_literal} string_literal;

  full_name =
    {simple} name |
    {compound} name dot full_name;

  list =
    {empty} left_square right_square |
    {full}  left_square list_body right_square;

  list_body =
    expression list_tail?;

  list_tail =
    comma list_body;

  integer_literal =
    number;

  string_literal =
    quoted_string;
