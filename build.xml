<?xml version="1.0"?>

<!--

  Ant build file for the entire biojava tree

  see:
  <a href="http://jakarta.apache.org/ant">Ant Project Homepage</a>
  <a href="http://home.wxs.nl/~ajkuiper/ant.html">Ant User Manual</a>
  <a href="http://jakarta.apache.org/builds/tomcat/nightly/ant.zip">Download</a>

  targets:

    compile
    compile-tests compiles JUnit tests
    compile-demos compiles the demo files
    compile-apps  compiles the application files
    package       builds the biojava.jar file (default)
    package-demos builds the demos.jar file
    package-apps  builds the apps.jar file
    runtests      runs all JUnit tests
    seqtests      runs sequence subset of JUnit tests
    symboltests   runs symbol subset of JUnit tests
    javadocs      builds API documentation
    docbook       builds DocBook documentation
    dist
    dist-zip     'binary' release (jar & documentation) in zip format
    dist-tgz     'binary' release (jar & documentation) in tar.gz format
    dist-both    both dist-zip & dist-tgz
    clean        cleans up the build & dist directories

  author:  Michael Heuer, modified by Keith James (JUnit support,
           DocBook support), modified Greg Cox (fixed documentation)
  version: $Id$

  portions Copyright (c) 1999-2000 The Apache Software Foundation.

-->

<project default="package" basedir=".">

  <target name="init">
    <tstamp />
    <property name="name" value="biojava" />
    <property name="version" value="live" />

    <property name="build.compiler" value="modern" />

    <property name="classpath" value="bytecode.jar:htmlparser.jar:commons-cli.jar" />
    <property name="docbook.tools.file" value="docbook.jar" />  

    <!-- Check the current system classpath for JUnit -->
    <available classpath="${java.class.path}"
               classname="junit.framework.TestCase"
               property="junit.present" />

    <!-- Check for XSLT OutputProperty support in Ant (only in Ant >= 1.5) -->
    <available classpath="${java.class.path}"
               classname="org.apache.tools.ant.taskdefs.XSLTProcess$OutputProperty"
               property="outputproperty.support" />

    <!-- Check for JUnit support in Ant (only in >= 1.3) -->
    <available classpath="${java.class.path}"
               classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTest"
               property="junit.support" />

    <!-- Check for Java 1.4 -->
    <available classpath="${java.class.path}"
               classname="java.nio.Buffer"
               property="java14">
    </available>

    <!-- Echo information -->
    <echo message="JUnit present:                   ${junit.present}" />
    <echo message="JUnit supported by Ant:          ${junit.support}" />

    <property name="readme" value="./README" />
    <property name="license" value="./LICENSE" />
    <property name="src.dir" value="./src" />
    <property name="src14.dir" value="./src-1.4" />
    <property name="tests.dir" value="./tests" />
    <property name="tests14.dir" value="./tests-1.4" />
    <property name="demos.dir" value="./demos" />
    <property name="demos14.dir" value="./demos-1.4" />
    <property name="apps.dir" value="./apps" />
    <property name="docs.dir" value="./docs" />
    <property name="doc.css.file" value="biojava-doc.css" />
    <property name="reports.dir" value="./reports" />
    <property name="manifest.dir" value="./manifest" />
    <property name="manifest.file" value="defaultmanifest.txt" />
    <property name="demosmanifest.file" value="demosmanifest.txt" />
    <property name="appsmanifest.file" value="appsmanifest.txt" />
    <property name="resources.dir" value="./resources" />
    <property name="taglets.dir" value="./taglets" />

    <property name="packages" value="org.*" />

    <property name="build.dir" value="./ant-build" />
    <!-- Subdirectories for main source and classes -->
    <property name="build.src.main" value="${build.dir}/src/main" />
    <property name="build.dest.main" value="${build.dir}/classes/main" />
    <!-- Subdirectories for tests source and classes -->
    <property name="build.src.tests" value="${build.dir}/src/tests" />
    <property name="build.dest.tests" value="${build.dir}/classes/tests" />
    <!-- Subdirectories for demos source and classes -->
    <property name="build.src.demos" value="${build.dir}/src/demos" />
    <property name="build.dest.demos" value="${build.dir}/classes/demos" />
    <!-- Subdirectories for apps source and classes -->
    <property name="build.src.apps" value="${build.dir}/src/apps" />
    <property name="build.dest.apps" value="${build.dir}/classes/apps" />
    <!-- Subdirectories for docs source -->
    <property name="build.src.docs" value="${build.dir}/src/docs" />
    <property name="build.dest.docs" value="${build.dir}/docs" />
    <property name="build.dest.javadocs" value="${build.dest.docs}/api" />
    <!-- Subdirectory for libraries used during build -->
    <property name="build.lib" value="${build.dir}/lib" />
    <!-- Subdirectory for taglets -->
    <property name="build.src.taglets" value="${build.dir}/src/taglets" />
    <property name="build.dest.taglets" value="${build.dir}/dest/taglets" />
    <!-- Subdirectory for test reports -->
    <property name="reports.tests" value="./reports/tests" />

    <property name="dist.root" value="./dist" />
    <property name="dist.dir" value="${dist.root}/${name}-${version}" />
  </target>

  <!-- Prepares the build directory -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}" />
  </target>

  <!-- Prepares the source code -->
  <target name="prepare-core" depends="init,prepare">

    <!-- Creates directories -->
    <mkdir dir="${build.src.main}" />
    <mkdir dir="${build.dest.main}" />
    <mkdir dir="${build.src.tests}" />
    <mkdir dir="${build.dest.tests}" />
    <mkdir dir="${reports.tests}" />
    <mkdir dir="${build.src.demos}" />
    <mkdir dir="${build.dest.demos}" />
    <mkdir dir="${build.src.apps}" />
    <mkdir dir="${build.dest.apps}" />
    <mkdir dir="${build.src.docs}" />
    <mkdir dir="${build.dest.docs}" />
    <mkdir dir="${build.dest.javadocs}" />
    <mkdir dir="${build.lib}" />

    <!-- Copies src files -->
    <copy todir="${build.src.main}">
      <fileset dir="${src.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies test src files -->
    <copy todir="${build.src.tests}">
      <fileset dir="${tests.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies demos files -->
    <copy todir="${build.src.demos}">
      <fileset dir="${demos.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies apps files -->
    <copy todir="${build.src.apps}">
      <fileset dir="${apps.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies docs files -->
    <copy todir="${build.src.docs}">
      <fileset dir="${docs.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies manifest -->
    <copy todir="${build.src.main}">
      <fileset dir="${manifest.dir}">
        <include name="${manifest.file}" />
      </fileset>
    </copy>

    <!-- Copies demo manifest -->
    <copy todir="${build.src.demos}">
      <fileset dir="${manifest.dir}">
        <include name="${demosmanifest.file}" />
      </fileset>
    </copy>

    <!-- Copies apps manifest -->
    <copy todir="${build.src.apps}">
      <fileset dir="${manifest.dir}">
        <include name="${appsmanifest.file}" />
      </fileset>
    </copy>

    <!-- Copies resources -->
    <copy todir="${build.dest.main}">
      <fileset dir="${resources.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies jars -->
    <copy todir="${build.dir}">
      <fileset dir=".">
        <include name="*.jar" />
        <exclude name="${docbook.tools.file}" />
      </fileset>
    </copy>
  </target>

  <target name="prepare-14taglets" depends="init" if="java14">
    <mkdir dir="${build.src.taglets}" />
    <mkdir dir="${build.dest.taglets}" />

    <copy todir="${build.src.taglets}">
      <fileset dir="${taglets.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>
  </target>

  <!-- Prepares DocBook environment and encloses it from older Ant versions -->
  <target name="prepare-docs" depends="init,prepare-core" if="outputproperty.support">
    <!-- Check the current system classpath for Trax -->
    <available classpath="${java.class.path}"
               classname="javax.xml.transform.Transformer"
               property="trax.present">
    </available>
    <echo message="Trax API present:                ${trax.present}" />

    <!-- DocBook XML DTD path -->
    <property name="docbook.dir" value="${build.lib}/xml-dtd-4.2" />
    <property name="docbook.dtd" value="${docbook.dir}/docbookx.dtd" />

    <!-- DocBook XML stylesheet path -->
    <property name="stylesheet.dir" value="${build.lib}/docbook-xsl-1.44" />
    <property name="docbook.xsl" value="${stylesheet.dir}/xhtml/chunk.xsl" />

    <!-- DocBook Public ID -->
    <property name="docbook.public.id" value="-//OASIS//DTD DocBook XML V4.2//EN" />

    <!-- Setup DocBook XML catalog -->
    <xmlcatalog id="docbook.cat">
      <dtd publicId="${docbook.public.id}" location="${docbook.dtd}" />
    </xmlcatalog>

    <!-- unjar the DTD and stylesheets for use -->
    <unjar src="${docbook.tools.file}" dest="${build.lib}">
      <patternset>
        <include name="**" />
        <exclude name="META-INF/*" />
      </patternset>
    </unjar>
  </target>

  <target name="prepare-src" depends="init,prepare-core" />

  <!-- Compiles the source directory -->
  <target name="compile" depends="init,prepare-src">
    <javac
      srcdir="${build.src.main}"
      destdir="${build.dest.main}"
      classpath="${classpath}"
      deprecation="false"
      depend="no"
      debug="true"
    />
  </target>

  <!-- Compiles the tests directory -->
  <target name="compile-tests" depends="init,prepare-src,package">
    <javac
      srcdir="${build.src.tests}"
      destdir="${build.dest.tests}"
      debug="true"
      deprecation="false"
      depend="yes">
      <classpath>
        <pathelement path="${classpath}" />
        <pathelement path="${build.dest.main}" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the demos directory -->
  <target name="compile-demos" depends="init,prepare-src,package">
    <javac
      srcdir="${build.src.demos}"
      destdir="${build.dest.demos}"
      deprecation="false"
      debug="true"
      depend="yes">
      <classpath>
        <pathelement path="${classpath}" />
        <pathelement path="${build.dest.main}" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the apps directory -->
  <target name="compile-apps" depends="init,prepare-src,package">
    <javac
      srcdir="${build.src.apps}"
      destdir="${build.dest.apps}"
      deprecation="false"
      debug="true"
      depend="yes">
      <classpath>
        <pathelement path="${classpath}" />
        <pathelement path="${build.dest.main}" />
      </classpath>
    </javac>
  </target>
  
  <target name="compile-14taglets" depends="init,prepare-14taglets" if="java14">
    <javac
      srcdir="${build.src.taglets}"
      destdir="${build.dest.taglets}"
      debug="true"
    >
      <classpath>
        <pathelement path="${classpath}" />
      </classpath>
    </javac>
  </target>

  <!-- Creates the class package (tests are left in the parallel tree) -->
  <target name="package" depends="init,compile">
    <jar
      jarfile="${build.dir}/${name}.jar"
      basedir="${build.dest.main}"
      manifest="${build.src.main}/${manifest.file}"
      includes="**"
    />
  </target>
  
  <!-- Create the demo package -->
  <target name="package-demos" depends="init,package,compile-demos">
    <jar
      jarfile="${build.dir}/demo.jar"
      basedir="${build.dest.demos}"
      manifest="${build.src.demos}/${demosmanifest.file}"
      includes="**"
    />
  </target>

  <!-- Create the apps package -->
  <target name="package-apps" depends="init,package,compile-apps">
    <jar
      jarfile="${build.dir}/apps.jar"
      basedir="${build.dest.apps}"
      manifest="${build.src.apps}/${appsmanifest.file}"
      includes="**"
    />
  </target>

  <!-- Runs tests if the Ant optional JUnit support is available -->
  <target name="runtests" depends="init,compile-tests" >
    <junit maxmemory="128m" printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.main}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="**/*Test.class" />
          <include name="**/*TestSuite.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Runs tests if the Ant optional JUnit support is available -->
  <target name="runmosttests" depends="init,compile-tests" >
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.main}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="**/*Test.class" />
          <include name="**/*TestSuite.class" />
          <exclude name="**/ssbind/*Test.class" />
          <exclude name="**/ssbind/*TestSuite.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="seqtests" depends="init,compile-tests" if="junit.support">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.main}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/seq/**/*Test.class" />
          <include name="org/biojava/bio/seq/**/*TestSuite.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  <target name="symboltests" depends="init,compile-tests" if="junit.support">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.main}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/symbol/*Test.class" />
          <include name="org/biojava/bio/symbol/*TestSuite.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  <target name="biotests" depends="init,compile-tests" if="junit.support">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.main}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/*Test.class" />
          <include name="org/biojava/bio/*TestSuite.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  <target name="ontotests" depends="init,compile-tests" if="junit.support">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.main}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/ontology/*Test.class" />
          <include name="org/biojava/bio/ontology/*TestSuite.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="filtertests" depends="init,compile-tests" if="junit.support">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.main}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/seq/filter/*Test.class" />
          <include name="org/biojava/bio/seq/filter/*TestSuite.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="dptests" depends="init,compile-tests" if="junit.support">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.main}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/dp/*Test.class" />
          <include name="org/biojava/bio/dp/*TestSuite.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Creates the API documentation -->
  <target name="javadocs" depends="init,prepare-src,compile-14taglets">
    <mkdir dir="${build.dest.javadocs}" />
    <javadoc
      packagenames="${packages}"
      sourcepath="${build.src.main}"
      classpath="${build.dir}/${name}.jar"
      destdir="${build.dest.javadocs}"
      author="true"
      version="true"
      use="true"
      windowtitle="${name} API"
      doctitle="${name}"
      maxmemory="96m">
       <group title="Core biological packages"
              packages="org.biojava.bio:org.biojava.bio.dist:org.biojava.bio.search:org.biojava.bio.seq:org.biojava.bio.seq.db:org.biojava.bio.seq.genomic:org.biojava.bio.seq.io:org.biojava.bio.symbol:org.biojava.bio.alignment:org.biojava.directory:org.biojava.bibliography:org.biojava.bio.taxa" />

       <group title="User interface components"
              packages="org.biojava.bio.gui:org.biojava.bio.gui.sequence" />

       <group title="Sequence databases and formats"
              packages="org.biojava.bio.seq.io.agave:org.biojava.bio.seq.io.game:org.biojava.bio.program.das:org.biojava.bio.seq.ragbag:org.biojava.bio.seq.db.emblcd:org.biojava.bio.program.xff:org.biojava.bio.seq.dist:org.biojava.bio.seq.io.game12:org.biojava.bio.seq.db.biofetch:org.biojava.bio.seq.db.flat:org.biojava.bio.seq.db.biosql:org.biojava.bio.program.indexdb" />

       <group title="Handling output from external tools"
              packages="org.biojava.bio.program:org.biojava.bio.program.gff:org.biojava.bio.program.sax:org.biojava.bio.program.xml:org.biojava.bio.program.blast2html:org.biojava.bio.program.search:org.biojava.bio.program.ssbind:org.biojava.bio.program.phred:org.biojava.bio.program.hmmer:org.biojava.bio.program.sax.blastxml" />
       
       <group title="Dynamic programming packages"
              packages="org.biojava.bio.dp:org.biojava.bio.dp.onehead:org.biojava.bio.dp.twohead" />

       <group title="Chromatogram and trace file support"
              packages="org.biojava.bio.chromatogram:org.biojava.bio.program.abi:org.biojava.bio.program.scf:org.biojava.bio.chromatogram.graphic" />     
              
       <group title="Utilities and developers' packages"
              packages="org.biojava.bio.seq.impl:org.biojava.bio.seq.projection:org.biojava.utils:org.biojava.utils.cache:org.biojava.utils.xml:org.biojava.utils.stax:org.biojava.utils.io:org.biojava.utils.math:org.biojava.utils.net:org.biojava.utils.candy:org.biojava.bio.seq.io.filterxml:org.biojava.bio.program.tagvalue" />

       <group title="Experimental and new packages"
              packages="org.biojava.bio.proteomics:org.biojava.bio.molbio:org.biojava.stats.svm:org.biojava.stats.svm.tools:org.biojava.bio.seq.homol:org.biojava.utils.lsid:org.biojava.bio.program.unigene:org.biojava.bio.program.ssaha:org.biojava.bio.seq.distributed:org.biojava.bio.annodb:org.biojava.bio.ontology:org.biojava.bio.ontology.io:org.biojava.bio.program.formats:org.biojava.bio.program.gff3:org.biojava.bio.structure" />
	      
       <taglet name="UserLevel" path="${build.dest.taglets}" />
       <taglet name="MetaData" path="${build.dest.taglets}" />
    </javadoc>
  </target>

  <!-- Creates the DocBook documentation -->
  <target name="docbook" depends="init,prepare,prepare-core,prepare-docs" if="trax.present">
    <xslt
      in="${build.src.docs}/biojava-doc-main.xml"
      out="${build.dest.docs}/index.html"
      style="${docbook.xsl}"
      force="true">
        <!-- Pass XSL parameters to transformer -->
        <param name="html.stylesheet" expression="${doc.css.file}" />
        <param name="html.ext" expression=".html" />
        <param name="using.chunker" expression="1" />
        <param name="chunk.sections" expression="0" />
        <param name="use.id.as.filename" expression="1" />
        <outputproperty name="method" value="xml" />
        <outputproperty name="standalone" value="yes" />
        <outputproperty name="encoding" value="UTF-8" />
        <outputproperty name="indent" value="no" />
    </xslt>
    <!-- CSS file used by HTML output -->
    <copy file="${build.src.docs}/${doc.css.file}" todir="${build.dest.docs}" />
    <!-- Images used by HTML output -->
    <copy todir="${build.dest.docs}">
      <fileset dir="${build.src.docs}">
        <include name="*/*.png" />
        <include name="*/*.jpg" />
        <include name="*/*.gif" />
      </fileset>
    </copy>
  </target>

  <!-- Creates the distribution -->
  <target name="dist" depends="init,package,runtests,javadocs,docbook">
    <mkdir dir="${dist.root}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.dir}/lib" />
    <mkdir dir="${dist.dir}/docs" />

    <copy file="${readme}" todir="${dist.dir}" />
    <copy file="${license}" todir="${dist.dir}" />

    <copy file="${build.dir}/${name}.jar" tofile="${dist.dir}/lib/${name}.jar" />
    <copy todir="${dist.dir}/docs">
      <fileset dir="${build.dest.docs}" />
    </copy>
  </target>

  <!-- zips the dist -->
  <target name="dist-zip" depends="init,dist">
    <zip zipfile="${name}-${version}.zip" basedir="${dist.dir}" includes="**" />
  </target>

  <!-- tgzs the dist -->
  <target name="dist-tgz" depends="init,dist">
    <tar tarfile="${name}-${version}.tar" basedir="${dist.root}" includes="**" />
    <gzip zipfile="${name}-${version}.tar.gz" src="${name}-${version}.tar" />
  </target>

  <!-- zip & tgz -->
  <target name="dist-both" depends="init,dist-zip,dist-tgz" />

  <!-- Cleans everything -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}" />
    <delete dir="${dist.root}" />
    <delete file="${name}-${version}.tar.gz" />
    <delete file="${name}-${version}.tar" />
    <delete file="${name}-${version}.zip" />
  </target>

  <target name="sync">
    <cvs command="update" />
    <AntCall target="package"/>
    <cvs command="commit" />
  </target>
</project>
