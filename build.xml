<?xml version="1.0"?>

<!--

  Ant build file for the entire biojava tree

  see:
  <a href="http://jakarta.apache.org/ant">Ant Project Homepage</a>
  <a href="http://home.wxs.nl/~ajkuiper/ant.html">Ant User Manual</a>
  <a href="http://jakarta.apache.org/builds/tomcat/nightly/ant.zip">Download</a>

  targets:

    compile
    compile-tests compiles JUnit tests
    compile-demos compiles the demo files
    compile-apps  compiles the application files
    package       builds the biojava.jar file (default)
    package-demos builds the demos.jar file
    package-apps  builds the jar.apps file
    runtests      runs all JUnit tests
    seqtests      runs sequence subset of JUnit tests
    symboltests   runs symbol subset of JUnit tests
    javadoc       builds API documentation
    docbook       builds DocBook documentation
    dist
    dist-zip     'binary' release (jar & documentation) in zip format
    dist-tgz     'binary' release (jar & documentation) in tar.gz format
    dist-both    both dist-zip & dist-tgz
    clean        cleans up the build & dist directories

  author:  Michael Heuer, modified by Keith James (JUnit support,
           DocBook support), modified Greg Cox (fixed documentation)
  version: $Id$

  portions Copyright (c) 1999-2000 The Apache Software Foundation.

-->

<project default="package-biojava" basedir=".">

  <!-- Checks environment and setup variables -->
  <target name="init" description="Checks environment and setup variables">
    <tstamp />
    <property name="version" value="live" />

    <property name="build.compiler" value="modern" />

    <property name="classpath" value="bytecode.jar:htmlparser.jar:commons-cli.jar" />
    <property name="docbook.tools.file" value="docbook.jar" />

    <!-- Check the current system classpath for JUnit -->
    <available classpath="${java.class.path}"
               classname="junit.framework.TestCase"
               property="junit.present" />

    <!-- Check for XSLT OutputProperty support in Ant (only in Ant >= 1.5) -->
    <available classpath="${java.class.path}"
               classname="org.apache.tools.ant.taskdefs.XSLTProcess$OutputProperty"
               property="outputproperty.support" />

    <!-- Check for JUnit support in Ant (only in >= 1.3) -->
    <available classpath="${java.class.path}"
               classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTest"
               property="junit.support" />

    <!-- Check for Java 1.4 -->
    <available classpath="${java.class.path}"
               classname="java.nio.Buffer"
               property="java14">
    </available>

    <available classpath="${java.class.path}"
               classname="org.sablecc.ant.taskdef.Sablecc"
               property="sableCC.support">
    </available>

    <!-- Echo information -->
    <echo message="JUnit present:                   ${junit.present}" />
    <echo message="JUnit supported by Ant:          ${junit.support}" />
    <echo message="SableCC supported by Ant:        ${sableCC.support}" />

    <property name="readme" value="./README" />
    <property name="license" value="./LICENSE" />
    <property name="src.dir" value="./src" />
    <property name="src14.dir" value="./src-1.4" />
    <property name="tests.dir" value="./tests" />
    <property name="tests14.dir" value="./tests-1.4" />
    <property name="grammars.dir" value="./grammars" />
    <property name="demos.dir" value="./demos" />
    <property name="demos14.dir" value="./demos-1.4" />
    <property name="apps.dir" value="./apps" />
    <property name="docs.dir" value="./docs" />
    <property name="doc.css.file" value="biojava-doc.css" />
    <property name="reports.dir" value="./reports" />
    <property name="manifest.dir" value="./manifest" />
    <property name="resources.dir" value="./resources" />
    <property name="taglets.dir" value="./taglets" />

    <!-- Main build directory -->
    <property name="build.dir" value="./ant-build" />
    <property name="build.src.dir" value="${build.dir}/src" />
    <property name="build.classes.dir" value="${build.dir}/classes" />

    <!-- Javac properties -->
    <property name="javac.depend" value="false" />
    <property name="javac.debug" value="true" />
    <property name="javac.deprecation" value="false" />

    <!-- Javadoc properties -->
    <property name="build.src.docs" value="${build.dir}/src/docs" />
    <property name="build.dest.docs" value="${build.dir}/docs" />
    <property name="packages" value="org.*" />

    <!-- Subdirectories for main source and classes -->
    <property name="name.biojava" value="biojava" />
    <property name="Name.biojava" value="BioJava" />
    <property name="build.src.biojava" value="${build.src.dir}/${name.biojava}" />
    <property name="build.dest.biojava" value="${build.classes.dir}/${name.biojava}" />
    <property name="build.docs.biojava" value="${build.dest.docs}/${name.biojava}" />
    <property name="jar.biojava" value="${build.dir}/${name.biojava}.jar" />
    <property name="manifest.file.biojava" value="${manifest.dir}/${name.biojava}.txt" />
    <!-- Subdirectories for tests source and classes -->
    <property name="name.tests" value="tests" />
    <property name="build.src.tests" value="${build.src.dir}/${name.tests}" />
    <property name="build.dest.tests" value="${build.classes.dir}/${name.tests}" />
    <property name="build.docs.tests" value="${build.dest.doc}/${name.tests}" />
    <property name="reports.tests" value="./reports/tests" />
    <!-- Subdirectories for demos source and classes -->
    <property name="name.demos" value="demos" />
    <property name="Name.demos" value="BioJava Demos" />
    <property name="build.src.demos" value="${build.src.dir}/${name.demos}" />
    <property name="build.dest.demos" value="${build.classes.dir}/${name.demos}" />
    <property name="build.docs.demos" value="${build.dest.docs}/${name.demos}" />
    <property name="jar.demos" value="${build.dir}/${name.demos}.jar" />
    <property name="manifest.file.demos" value="${manifest.dir}/${name.demos}.txt" />
    <!-- Subdirectories for apps source and classes -->
    <property name="name.apps" value="apps" />
    <property name="Name.apps" value="BioJava Applications" />
    <property name="build.src.apps" value="${build.src.dir}/${name.apps}" />
    <property name="build.dest.apps" value="${build.classes.dir}/${name.apps}" />
    <property name="build.docs.apps" value="${build.dest.docs}/${name.apps}" />
    <property name="jar.apps" value="${build.dir}/${name.apps}.jar" />
    <property name="manifest.file.apps" value="${manifest.dir}/${name.apps}.txt" />
    <!-- Subdirectory for grammars -->
    <property name="name.grammars" value="grammars" />
    <property name="Name.grammars" value="BioJava Grammars" />
    <property name="build.src.grammars" value="${build.src.dir}/${name.grammars}" />
    <property name="build.src.grammars_java" value="${build.src.dir}/${name.grammars}_java" />
    <property name="build.dest.grammars" value="${build.classes.dir}/${name.grammars}" />
    <property name="build.docs.grammars" value="${build.dest.docs}/${name.grammars}" />
    <property name="jar.grammars" value="${build.dir}/${name.grammars}.jar" />
    <!-- Subdirectory for libraries used during build -->
    <property name="build.lib" value="${build.dir}/lib" />
    <!-- Subdirectory for taglets -->
    <property name="name.taglets" value="taglets" />
    <property name="Name.taglets" value="BioJava Taglets" />
    <property name="build.src.taglets" value="${build.src.dir}/${name.taglets}" />
    <property name="build.dest.taglets" value="${build.classes.dir}/${name.taglets}" />
    <property name="build.docs.taglets" value="${build.dest.docs}/${name.taglets}" />

    <property name="dist.root" value="./dist" />
    <property name="dist.dir" value="${dist.root}/${name.biojava}-${version}" />
  </target>


  <!--
    Prepare each part of the project.

    Each preparation creates working directories and copies files over.
  -->

  <!-- Prepares the basic stuff -->
  <target name="prepare" depends="init" description="creates basic directories">
    <!-- Creates directories -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.lib}" />

    <!-- Copies jars -->
    <copy todir="${build.dir}">
      <fileset dir=".">
        <include name="*.jar" />
        <exclude name="${docbook.tools.file}" />
      </fileset>
    </copy>

  </target>

  <!-- Prepares the grammars -->
  <target name="prepare-grammars" depends="prepare" if="sableCC.support" 
   description="Prepares the grammars">

    <!-- Creates directories -->
    <mkdir dir="${build.src.grammars}" />
    <mkdir dir="${build.src.grammars_java}" />
    <mkdir dir="${build.dest.grammars}" />
    <mkdir dir="${build.docs.grammars}" />

    <!-- Copies grammar files -->
    <copy todir="${build.src.grammars}">
      <fileset dir="${grammars.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies manifest -->
    <copy
      file="${manifest.file.biojava}"
      tofile="${build.src.grammars}/manifest.txt"
    />

  </target>

  <!-- Copies taglet files -->
  <target name="prepare-taglets" depends="prepare" description="Copies taglet files">
    <mkdir dir="${build.src.taglets}" />
    <mkdir dir="${build.dest.taglets}" />
    <mkdir dir="${build.docs.taglets}" />

    <copy todir="${build.src.taglets}">
      <fileset dir="${taglets.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>
  </target>

  <!-- Prepares the biojava source code -->
  <target name="prepare-biojava" depends="prepare" 
  description="Prepares biojava source files">

    <!-- Creates directories -->
    <mkdir dir="${build.src.biojava}" />
    <mkdir dir="${build.dest.biojava}" />
    <mkdir dir="${build.docs.biojava}" />

    <!-- Copies src files -->
    <copy todir="${build.src.biojava}">
      <fileset dir="${src.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies manifest -->
    <copy
      file="${manifest.file.biojava}"
      tofile="${build.src.biojava}/manifest.txt"
    />

    <!-- Copies resources -->
    <copy todir="${build.dest.biojava}">
      <fileset dir="${resources.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

  </target>

  <!-- Prepares the test source code -->
  <target name="prepare-tests" depends="prepare" 
  description="Prepares the test source code">

    <!-- Creates directories -->
    <mkdir dir="${build.src.tests}" />
    <mkdir dir="${build.dest.tests}" />
    <mkdir dir="${build.docs.tests}" />
    <mkdir dir="${reports.tests}" />

    <!-- Copies test src files -->
    <copy todir="${build.src.tests}">
      <fileset dir="${tests.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

  </target>

  <!-- Prepares the demos code -->
  <target name="prepare-demos" depends="prepare" 
  description="Prepares the demos code">

    <!-- Creates directories -->
    <mkdir dir="${build.src.demos}" />
    <mkdir dir="${build.dest.demos}" />
    <mkdir dir="${build.docs.demos}" />

    <!-- Copies demos files -->
    <copy todir="${build.src.demos}">
      <fileset dir="${demos.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies demo manifest -->
    <copy
      file="${manifest.file.demos}"
      tofile="${build.src.demos}/manifest.txt"
    />

  </target>

  <!-- Prepares the apps code -->
  <target name="prepare-apps" depends="prepare"
  description="Prepares the apps code">

    <!-- Creates directories -->
    <mkdir dir="${build.src.apps}" />
    <mkdir dir="${build.dest.apps}" />
    <mkdir dir="${build.docs.apps}" />

    <!-- Copies apps files -->
    <copy todir="${build.src.apps}">
      <fileset dir="${apps.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>

    <!-- Copies apps manifest -->
    <copy
      file="${manifest.file.apps}"
      tofile="${build.src.apps}/manifest.txt"
    />

  </target>

  <!-- Prepares the javadocs -->
  <target name="prepare-javadocs" depends="prepare" description="Prepares the javadocs">

    <!-- Creates directories -->
    <mkdir dir="${build.src.docs}" />
    <mkdir dir="${build.dest.docs}" />

    <!-- Copies docs files -->
    <copy todir="${build.src.docs}">
      <fileset dir="${docs.dir}">
        <exclude name="**/CVS/**" />
      </fileset>
    </copy>
  </target>

  <!-- Prepares DocBook environment and encloses it from older Ant versions -->
  <target name="prepare-docs" depends="prepare" if="outputproperty.support"
  description="Prepares DocBook environment">
    <!-- Check the current system classpath for Trax -->
    <available classpath="${java.class.path}"
               classname="javax.xml.transform.Transformer"
               property="trax.present">
    </available>
    <echo message="Trax API present:                ${trax.present}" />

    <!-- DocBook XML DTD path -->
    <property name="docbook.dir" value="${build.lib}/xml-dtd-4.2" />
    <property name="docbook.dtd" value="${docbook.dir}/docbookx.dtd" />

    <!-- DocBook XML stylesheet path -->
    <property name="stylesheet.dir" value="${build.lib}/docbook-xsl-1.44" />
    <property name="docbook.xsl" value="${stylesheet.dir}/xhtml/chunk.xsl" />

    <!-- DocBook Public ID -->
    <property name="docbook.public.id" value="-//OASIS//DTD DocBook XML V4.2//EN" />

    <!-- Setup DocBook XML catalog -->
    <xmlcatalog id="docbook.cat">
      <dtd publicId="${docbook.public.id}" location="${docbook.dtd}" />
    </xmlcatalog>

    <!-- unjar the DTD and stylesheets for use -->
    <unjar src="${docbook.tools.file}" dest="${build.lib}">
      <patternset>
        <include name="**" />
        <exclude name="META-INF/*" />
      </patternset>
    </unjar>
  </target>

  <!--
    Compile each part of the project.

    This runs javac or any other tasks necisary to turn the source code into
    .class files.
  -->

  <!-- Compiles the grammars directory -->
  <target name="compile-grammars" depends="prepare-grammars" if="sableCC.support"
  description="Compiles the grammars directory">
    <!-- Turn the grammars into java code -->
    <taskdef name="sablecc" classname="org.sablecc.ant.taskdef.Sablecc" />
    <sablecc src="${build.src.grammars}"
             outputdirectory="${build.src.grammars_java}"
             includes="*.grammar" />

    <!-- Compile that java code -->
    <javac
      srcdir="${build.src.grammars_java}"
      destdir="${build.dest.grammars}"
      depend="${javac.depend}"
      deprecation="${javac.deprecation}"
      debug="${javac.debug}">
    </javac>

    <!-- Copy all the non-java files generated -->
    <copy todir="${build.dest.grammars}">
      <fileset dir="${build.src.grammars_java}">
        <exclude name="*.java" />
      </fileset>
    </copy>
  </target>

  <!-- Compiles the taglets directory -->
  <target name="compile-taglets" depends="init,prepare-taglets"
  description="Compiles the taglets directory">
    <javac
      srcdir="${build.src.taglets}"
      destdir="${build.dest.taglets}"
      depend="${javac.depend}"
      deprecation="${javac.deprecation}"
      debug="${javac.debug}">
      <classpath>
        <pathelement path="${classpath}" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the source directory -->
  <target name="compile-biojava" depends="prepare-biojava,package-grammars"
  description="Compiles the source directory">
    <javac
      srcdir="${build.src.biojava}"
      destdir="${build.dest.biojava}"
      depend="${javac.depend}"
      deprecation="${javac.deprecation}"
      debug="${javac.debug}">
      <classpath>
        <pathelement path="${classpath}" />
        <pathelement path="${jar.grammars}" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the tests directory -->
  <target name="compile-tests" depends="prepare-tests,package-biojava"
  description="Compiles the tests directory">
    <javac
      srcdir="${build.src.tests}"
      destdir="${build.dest.tests}"
      depend="${javac.depend}"
      deprecation="${javac.deprecation}"
      debug="${javac.debug}">
      <classpath>
        <pathelement path="${classpath}" />
        <pathelement path="${jar.biojava}" />
        <pathelement path="${jar.grammars}" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the demos directory -->
  <target name="compile-demos" depends="prepare-demos,package-biojava"
  description="Compiles the demos directory">
    <javac
      srcdir="${build.src.demos}"
      destdir="${build.dest.demos}"
      depend="${javac.depend}"
      deprecation="${javac.deprecation}"
      debug="${javac.debug}">
      <classpath>
        <pathelement path="${classpath}" />
        <pathelement path="${jar.biojava}" />
      </classpath>
    </javac>
  </target>

  <!-- Compiles the apps directory -->
  <target name="compile-apps" depends="prepare-apps,package-biojava"
  description="Compiles the apps directory">
    <javac
      srcdir="${build.src.apps}"
      destdir="${build.dest.apps}"
      depend="${javac.depend}"
      deprecation="${javac.deprecation}"
      debug="${javac.debug}">
      <classpath>
        <pathelement path="${classpath}" />
        <pathelement path="${jar.biojava}" />
      </classpath>
    </javac>
  </target>


  <!--
    Creates the .jar files containing each distributable component.

    This probably just jars up the .class files and any resources as well as
    a manifest for each distributable component.
  -->

  <!-- Creates the grammars package -->
  <target name="package-grammars" depends="compile-grammars" if="sableCC.support"
  description="Creates the grammars jar file">
    <jar
      jarfile="${jar.grammars}"
      basedir="${build.dest.grammars}"
      manifest="${build.src.grammars}/manifest.txt"
      includes="**"
    />
  </target>

  <!-- Creates the class package (tests are left in the parallel tree) -->
  <target name="package-biojava" depends="compile-biojava" 
  description="create biojava class jar file">
    <jar
      jarfile="${jar.biojava}"
      basedir="${build.dest.biojava}"
      manifest="${build.src.biojava}/manifest.txt"
      includes="**"
    />
  </target>

  <!-- Create the demo package -->
  <target name="package-demos" depends="init,package-biojava,compile-demos"
  description="create the demo jar file">
    <jar
      jarfile="${jar.demos}"
      basedir="${build.dest.demos}"
      manifest="${build.src.demos}/manifest.txt"
      includes="**"
    />
  </target>

  <!-- Create the apps package -->
  <target name="package-apps" depends="init,package-biojava,compile-apps"
  description="create the apps jar file">
    <jar
      jarfile="${jar.apps}"
      basedir="${build.dest.apps}"
      manifest="${build.src.apps}/manifest.txt"
      includes="**"
    />
  </target>


  <target
    name="package-all"
    depends="package-grammars,package-biojava,package-demos,package-apps"
    description="create all the jar files" />


  <!--
    Create Javadoc and other documentation for each distribution package.

    This probably just calls javadoc, but may call other documentation gubbins.
  -->

  <!-- Create taglet API documentation -->
  <target name="javadocs-taglets" depends="prepare-taglets"
  description="Create taglet API documentation">
    <javadoc
      sourcepath="${build.src.taglets}"
      classpath="${classpath}:${java.home}/../lib/tools.jar"
      destdir="${build.docs.taglets}"
      author="true"
      version="true"
      use="true"
      windowtitle="${Name.taglets} API"
      doctitle="${Name.taglets}"
      maxmemory="96m">
      <fileset dir="${build.src.taglets}" />
      <link href="http://java.sun.com/j2se/1.4.2/docs/api/" offline="false" />
      <link href="http://java.sun.com/j2se/1.4.2/docs/tooldocs/javadoc/doclet/"  offline="false"/>
    </javadoc>
  </target>

  <!-- Create grammar API documentation -->
  <target name="javadocs-grammars" depends="compile-grammars" if="sableCC.support"
  description="Create grammar API documentation">
    <javadoc
      packagenames="${packages}"
      sourcepath="${build.src.grammars_java}"
      classpath="${classpath}"
      destdir="${build.docs.grammars}"
      author="true"
      version="true"
      use="true"
      windowtitle="${Name.grammars} API"
      doctitle="${Name.grammars}"
      maxmemory="96m">
      <link href="http://java.sun.com/j2se/1.4.2/docs/api/" offline="false"/>
    </javadoc>
  </target>

  <!-- Creates the API documentation -->
  <target name="javadocs-biojava" depends="prepare-biojava,compile-taglets"
  description="Creates the API documentation">
    <javadoc
      packagenames="${packages}"
      sourcepath="${build.src.biojava}"
      classpath="${classpath}:${jar.grammars}"
      destdir="${build.docs.biojava}"
      author="true"
      version="true"
      use="true"
      windowtitle="${Name.biojava} API"
      doctitle="${Name.biojava}"
      maxmemory="96m">
       <link href="http://java.sun.com/j2se/1.4.2/docs/api/" offline="false"/>
       <link href="../grammars" offline="true" packagelistLoc="${build.docs.grammars}/package-list}"/>
       <group title="Core biological packages"
              packages="org.biojava.bio:org.biojava.bio.dist:org.biojava.bio.search:org.biojava.bio.seq:org.biojava.bio.seq.db:org.biojava.bio.seq.genomic:org.biojava.bio.seq.io:org.biojava.bio.symbol:org.biojava.bio.alignment:org.biojava.directory:org.biojava.bibliography:org.biojava.bio.taxa" />

       <group title="User interface components"
              packages="org.biojava.bio.gui:org.biojava.bio.gui.sequence" />

       <group title="Sequence databases and formats"
              packages="org.biojava.bio.seq.io.agave:org.biojava.bio.seq.io.game:org.biojava.bio.program.das:org.biojava.bio.seq.ragbag:org.biojava.bio.seq.db.emblcd:org.biojava.bio.program.xff:org.biojava.bio.seq.dist:org.biojava.bio.seq.io.game12:org.biojava.bio.seq.db.biofetch:org.biojava.bio.seq.db.flat:org.biojava.bio.seq.db.biosql:org.biojava.bio.program.indexdb" />

       <group title="Handling output from external tools"
              packages="org.biojava.bio.program:org.biojava.bio.program.gff:org.biojava.bio.program.sax:org.biojava.bio.program.xml:org.biojava.bio.program.blast2html:org.biojava.bio.program.search:org.biojava.bio.program.ssbind:org.biojava.bio.program.phred:org.biojava.bio.program.hmmer:org.biojava.bio.program.sax.blastxml" />

       <group title="Dynamic programming packages"
              packages="org.biojava.bio.dp:org.biojava.bio.dp.onehead:org.biojava.bio.dp.twohead" />

       <group title="Chromatogram and trace file support"
              packages="org.biojava.bio.chromatogram:org.biojava.bio.program.abi:org.biojava.bio.program.scf:org.biojava.bio.chromatogram.graphic" />

       <group title="Utilities and developers' packages"
              packages="org.biojava.bio.seq.impl:org.biojava.bio.seq.projection:org.biojava.utils:org.biojava.utils.cache:org.biojava.utils.xml:org.biojava.utils.stax:org.biojava.utils.io:org.biojava.utils.math:org.biojava.utils.net:org.biojava.utils.candy:org.biojava.bio.seq.io.filterxml:org.biojava.bio.program.tagvalue" />

       <group title="Experimental and new packages"
              packages="org.biojava.bio.proteomics:org.biojava.bio.molbio:org.biojava.stats.svm:org.biojava.stats.svm.tools:org.biojava.bio.seq.homol:org.biojava.utils.lsid:org.biojava.bio.program.unigene:org.biojava.bio.program.ssaha:org.biojava.bio.seq.distributed:org.biojava.bio.annodb:org.biojava.bio.ontology:org.biojava.bio.ontology.io:org.biojava.bio.program.formats:org.biojava.bio.program.gff3:org.biojava.bio.structure" />

       <taglet name="UserLevel" path="${build.dest.taglets}" />
       <taglet name="MetaData" path="${build.dest.taglets}:${classpath}:${jar.biojava}" />
    </javadoc>
  </target>

  <!-- Create demos API documentation -->
  <target name="javadocs-demos" depends="prepare-demos,compile-taglets"
  description="Create the demos API documentation">
    <javadoc
      packagenames="${packages}"
      sourcepath="${build.src.demos}"
      classpath="${classpath}"
      destdir="${build.docs.demos}"
      author="true"
      version="true"
      use="true"
      windowtitle="${Name.demos} API"
      doctitle="${Name.demos}"
      maxmemory="96m">
      <link href="http://java.sun.com/j2se/1.4.2/docs/api/" offline="false"/>
      <link href="../biojava" offline="true" packagelistLoc="${build.docs.biojava}/package-list}"/>
      <taglet name="UserLevel" path="${build.dest.taglets}" />
      <taglet name="MetaData" path="${build.dest.taglets}:${classpath}" />
    </javadoc>
  </target>

  <!-- Create apps API documentation -->
  <target name="javadocs-apps" depends="prepare-apps,compile-taglets"
  description="Create the apps API documentation">
    <javadoc
      packagenames="${packages}"
      sourcepath="${build.src.apps}"
      classpath="${classpath}"
      destdir="${build.docs.apps}"
      author="true"
      version="true"
      use="true"
      windowtitle="${Name.apps} API"
      doctitle="${Name.apps}"
      maxmemory="96m">
      <link href="http://java.sun.com/j2se/1.4.2/docs/api/" offline="false"/>
      <link href="../biojava" offline="true" packagelistLoc="${build.docs.biojava}/package-list}"/>
      <taglet name="UserLevel" path="${build.dest.taglets}" />
      <taglet name="MetaData" path="${build.dest.taglets}:${classpath}" />
    </javadoc>
  </target>

  <!-- Creates the DocBook documentation -->
  <target name="docbook" depends="prepare-docs" if="trax.present"
  description="Creates the DocBook documentation">

    <xslt
      in="${build.src.docs}/biojava-doc-main.xml"
      out="${build.dest.docs}/index.html"
      style="${docbook.xsl}"
      force="true">
        <!-- Pass XSL parameters to transformer -->
        <param name="html.stylesheet" expression="${doc.css.file}" />
        <param name="html.ext" expression=".html" />
        <param name="using.chunker" expression="1" />
        <param name="chunk.sections" expression="0" />
        <param name="use.id.as.filename" expression="1" />
        <outputproperty name="method" value="xml" />
        <outputproperty name="standalone" value="yes" />
        <outputproperty name="encoding" value="UTF-8" />
        <outputproperty name="indent" value="no" />
    </xslt>
    <!-- CSS file used by HTML output -->
    <copy file="${build.src.docs}/${doc.css.file}" todir="${build.dest.docs}" />
    <!-- Images used by HTML output -->
    <copy todir="${build.dest.docs}">
      <fileset dir="${build.src.docs}">
        <include name="*/*.png" />
        <include name="*/*.jpg" />
        <include name="*/*.gif" />
      </fileset>
    </copy>
  </target>

  <target
    name="javadocs-all"
    depends="javadocs-taglets,javadocs-grammars,javadocs-biojava,javadocs-demos,javadocs-apps,docbook"
    description="Creates the javadocs for all components"
  />

  <!-- Runs tests if the Ant optional JUnit support is available -->
  <target name="runtests" depends="compile-tests" 
  description="Run all tests, can be quite slow">
    <junit maxmemory="128m" printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.biojava}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes generated by the grammars -->
        <pathelement path="${jar.grammars}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="**/*Test.class" />
          <include name="**/*TestSuite.class" />
          <exclude name="**/Abstract*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Runs tests if the Ant optional JUnit support is available -->
  <target name="runmosttests" depends="compile-tests" 
  description="Run all tests except blast unit tests, lot faster than runtests">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.biojava}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes generated by the grammars -->
        <pathelement path="${jar.grammars}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="**/*Test.class" />
          <include name="**/*TestSuite.class" />
          <exclude name="**/Abstract*Test.class" />
          <exclude name="**/ssbind/*Test.class" />
          <exclude name="**/ssbind/*TestSuite.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="seqtests" depends="compile-tests" if="junit.support"
  description="Run the tests under the seq package">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.biojava}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes generated by the grammars -->
        <pathelement path="${jar.grammars}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/seq/**/*Test.class" />
          <include name="org/biojava/bio/seq/**/*TestSuite.class" />
          <exclude name="**/Abstract*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="symboltests" depends="compile-tests" if="junit.support"
  description="Run the tests under the symbol package">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.biojava}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes generated by the grammars -->
        <pathelement path="${jar.grammars}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/symbol/*Test.class" />
          <include name="org/biojava/bio/symbol/*TestSuite.class" />
          <exclude name="**/Abstract*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="biotests" depends="compile-tests" if="junit.support"
  description="Run all tests under the bio package">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.biojava}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes generated by the grammars -->
        <pathelement path="${jar.grammars}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/*Test.class" />
          <include name="org/biojava/bio/*TestSuite.class" />
          <exclude name="**/Abstract*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="ontotests" depends="compile-tests" if="junit.support"
  description="Runs all the ontology tests">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.biojava}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes generated by the grammars -->
        <pathelement path="${jar.grammars}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/ontology/*Test.class" />
          <include name="org/biojava/ontology/*TestSuite.class" />
          <exclude name="**/Abstract*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="filtertests" depends="compile-tests" if="junit.support"
  description="run all filter tests">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.biojava}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes generated by the grammars -->
        <pathelement path="${jar.grammars}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/seq/filter/*Test.class" />
          <include name="org/biojava/bio/seq/filter/*TestSuite.class" />
          <exclude name="**/Abstract*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="dptests" depends="compile-tests" if="junit.support"
  description="Runs all the dp tests">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.biojava}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes generated by the grammars -->
        <pathelement path="${jar.grammars}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/dp/*Test.class" />
          <include name="org/biojava/bio/dp/*TestSuite.class" />
          <exclude name="**/Abstract*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="searchtests" depends="compile-tests" if="junit.support"
  description="Runs all the search tests">
    <junit printsummary="yes" haltonfailure="no" dir="${build.dest.tests}">
      <formatter type="plain" usefile="true" />
      <classpath>
        <!-- main classes from build -->
        <pathelement path="${build.dest.biojava}" />
        <!-- test classes from build -->
        <pathelement path="${build.dest.tests}" />
        <!-- test data from build -->
        <pathelement path="${build.src.tests}" />
        <!-- classes specified in this file -->
        <pathelement path="${classpath}" />
        <!-- classes generated by the grammars -->
        <pathelement path="${jar.grammars}" />
        <!-- classes specified in system classpath -->
        <pathelement path="${java.class.path}" />
      </classpath>
      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}" if="junit.present">
        <fileset dir="${build.dest.tests}">
          <include name="org/biojava/bio/search/*Test.class" />
          <include name="org/biojava/bio/search/*TestSuite.class" />
          <exclude name="**/Abstract*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- Creates the distribution -->
  <target name="dist" depends="runtests,javadocs-all,docbook"
  description="Creates the distribution">
    <mkdir dir="${dist.root}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.dir}/lib" />
    <mkdir dir="${dist.dir}/docs" />

    <copy file="${readme}" todir="${dist.dir}" />
    <copy file="${license}" todir="${dist.dir}" />

    <copy file="${jar.biojava}" tofile="${dist.dir}/lib/${name.biojava}.jar" />
    <copy todir="${dist.dir}/docs">
      <fileset dir="${build.dest.docs}" />
    </copy>
  </target>

  <!-- zips the dist -->
  <target name="dist-zip" depends="init,dist"
  description="zips the distribution">
    <zip zipfile="${name.biojava}-${version}.zip" basedir="${dist.dir}" includes="**" />
  </target>

  <!-- tgzs the dist -->
  <target name="dist-tgz" depends="init,dist"
  description="tgzs the distribution">
    <tar tarfile="${name.biojava}-${version}.tar" basedir="${dist.root}" includes="**" />
    <gzip zipfile="${name.biojava}-${version}.tar.gz" src="${name.biojava}-${version}.tar" />
  </target>

  <!-- zip & tgz -->
  <target name="dist-both" depends="init,dist-zip,dist-tgz" 
  description="Zips and tgzs the distribution"/>

  <!-- Cleans everything -->
  <target name="clean" depends="init"
  description="Cleans everything">
    <delete dir="${build.dir}" />
    <delete dir="${dist.root}" />
    <delete file="${name.biojava}-${version}.tar.gz" />
    <delete file="${name.biojava}-${version}.tar" />
    <delete file="${name.biojava}-${version}.zip" />
  </target>

  <target name="sync" description="synchronize with the cvs">
    <cvs command="update" />
    <AntCall target="package"/>
    <cvs command="commit" />
  </target>
</project>
